/**
 * Generated by orval v6.9.6 🍺
 * Do not edit manually.
 * OpenBooks Search Service
 * This service provides advanced search capabilities to OpenBooks as well as a management interface.
 * OpenAPI spec version: 1.0
 */
import { rest } from "msw";
import { faker } from "@faker-js/faker";

export const getGetApiScheduleMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({}));

export const getPostApiScheduleMock = () => ({
  createdAt: faker.helpers.arrayElement([faker.random.word(), undefined]),
  deletedAt: faker.helpers.arrayElement([{}, undefined]),
  history: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  schedule: faker.random.word(),
  server: faker.random.word(),
  updatedAt: faker.helpers.arrayElement([faker.random.word(), undefined]),
});

export const getPutApiScheduleMock = () => ({
  createdAt: faker.helpers.arrayElement([faker.random.word(), undefined]),
  deletedAt: faker.helpers.arrayElement([{}, undefined]),
  history: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  schedule: faker.random.word(),
  server: faker.random.word(),
  updatedAt: faker.helpers.arrayElement([faker.random.word(), undefined]),
});

export const getScheduleMSW = () => [
  rest.get("*/api/schedule", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetApiScheduleMock())
    );
  }),
  rest.post("*/api/schedule", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostApiScheduleMock())
    );
  }),
  rest.put("*/api/schedule", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPutApiScheduleMock())
    );
  }),
  rest.delete("*/api/schedule/:scheduleId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
];
