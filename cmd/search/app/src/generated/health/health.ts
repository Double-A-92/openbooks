/**
 * Generated by orval v6.9.6 üç∫
 * Do not edit manually.
 * OpenBooks Search Service
 * This service provides advanced search capabilities to OpenBooks as well as a management interface.
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";

/**
 * Get the health of the service and the underlying search provider.
 * @summary Get the health of the service
 */
export const getApiHealth = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/health`, options);
};

export const getGetApiHealthQueryKey = () => [`/api/health`];

export type GetApiHealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiHealth>>
>;
export type GetApiHealthQueryError = AxiosError<unknown>;

export const useGetApiHealth = <
  TData = Awaited<ReturnType<typeof getApiHealth>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiHealth>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiHealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiHealth>>> = ({
    signal,
  }) => getApiHealth({ signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof getApiHealth>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};
