consumes:
- application/json
definitions:
  controllers.HTTPError:
    properties:
      message:
        type: string
    type: object
  controllers.LogInRequest:
    properties:
      password:
        example: admin
        type: string
      username:
        example: admin
        type: string
    type: object
  controllers.UserInfo:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.History:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      ended_at:
        type: string
      error_count:
        type: integer
      id:
        type: integer
      schedule_id:
        type: integer
      started_at:
        type: string
      success_count:
        type: integer
      updatedAt:
        type: string
    type: object
  model.Schedule:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      history:
        items:
          $ref: '#/definitions/model.History'
        type: array
      id:
        type: integer
      schedule:
        type: string
      server:
        type: string
      updatedAt:
        type: string
    required:
    - schedule
    - server
    type: object
info:
  contact:
    name: OpenBooks
    url: https://github.com/evan-buss/openbooks
  description: This service provides advanced search capabilities to OpenBooks as
    well as a management interface.
  license:
    name: MIT
    url: https://mit-license.org/
  title: OpenBooks Search Service
  version: "1.0"
paths:
  /api/auth/login:
    post:
      description: Requires a valid username and password. If first time setup, use
        admin / admin.
      operationId: LogIn
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.LogInRequest'
      responses:
        "200":
          description: ""
        "400":
          description: ""
      summary: Log in to the admin site
      tags:
      - auth
  /api/auth/logout:
    post:
      operationId: LogOut
      responses:
        "200":
          description: ""
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: Log out of the admin site
      tags:
      - auth
  /api/auth/me:
    get:
      operationId: Me
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/controllers.UserInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: Get logged in user's information.
      tags:
      - auth
  /api/health:
    get:
      description: Get the health of the service and the underlying search provider.
      responses:
        "200":
          description: ""
        "500":
          description: ""
      summary: Get the health of the service
      tags:
      - health
  /api/schedule:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Schedule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: Get all schedules
      tags:
      - schedule
    post:
      parameters:
      - description: Schedule
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/model.Schedule'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: Create a schedule
      tags:
      - schedule
    put:
      parameters:
      - description: Schedule
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/model.Schedule'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: Update a schedule
      tags:
      - schedule
  /api/schedule/{scheduleId}:
    delete:
      parameters:
      - description: Schedule ID
        in: path
        name: scheduleId
        required: true
        type: integer
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.HTTPError'
      summary: Delete a schedule
      tags:
      - schedule
produces:
- application/json
swagger: "2.0"
